"""
Defines the base class for all editing strategies.
Editing strategies are responsible for selecting, ordering, and potentially modifying
transcript segments to achieve a desired video edit style.
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any # Added Any for config flexibility
from app.config import EditingFeatureFlags # Assuming config is in app.config

class EditingStrategy(ABC):
    """
    Abstract base class for video editing strategies.
    Each strategy implements a specific way of processing transcript segments.
    """
    def __init__(self, feature_flags: EditingFeatureFlags, strategy_specific_config: Dict[str, Any] = None):
        """
        Initializes the editing strategy.

        Args:
            feature_flags: General editing feature flags applicable across strategies.
            strategy_specific_config: Optional dictionary for strategy-specific settings.
        """
        self.feature_flags = feature_flags
        self.strategy_specific_config = strategy_specific_config if strategy_specific_config is not None else {}
        self._validate_configs()

    def _validate_configs(self):
        """
        Placeholder for validating feature_flags and strategy_specific_config.
        Subclasses can override this to perform specific validation.
        """
        if not isinstance(self.feature_flags, EditingFeatureFlags):
            raise ValueError("feature_flags must be an instance of EditingFeatureFlags")
        # Further validation can be added by subclasses
        pass

    @abstractmethod
    def process_segments(
        self, 
        segments: List[Dict[str, Any]], 
        narrative_outline: List[str] = None, 
        user_prompt: str = None
    ) -> List[Dict[str, Any]]:
        """
        Processes a list of transcript segments to select and arrange them for video editing.

        Args:
            segments: A list of transcript segments. Each segment is a dictionary
                      expected to contain at least 'start', 'end', and 'text'.
            narrative_outline: Optional list of narrative points generated by an AI model,
                               which can guide segment selection and arrangement.
            user_prompt: Optional user-provided prompt that influenced the narrative_outline
                         or can directly influence segment processing.

        Returns:
            A list of processed segments, potentially reordered, filtered, or duplicated,
            ready for video cutting and concatenation.
        """
        pass 